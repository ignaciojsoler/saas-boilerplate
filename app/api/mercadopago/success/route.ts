import { NextRequest, NextResponse } from "next/server";
import { createClient } from '@/lib/supabase/server';
import { getSubscriptionPlan } from '@/lib/supabase/subscriptions';

export async function GET(request: NextRequest) {
  console.log('üöÄ GET /api/mercadopago/success - Procesando redirecci√≥n de MercadoPago');
  
  try {
    const { searchParams } = new URL(request.url);
    const preapprovalId = searchParams.get('preapproval_id');
    const collectionId = searchParams.get('collection_id');
    const status = searchParams.get('status');
    
    console.log('üìù Par√°metros recibidos:', {
      preapprovalId,
      collectionId,
      status
    });

    if (!preapprovalId) {
      console.log('‚ùå Error: preapproval_id no encontrado');
      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_SITE_URL}/protected/billing?status=error&message=${encodeURIComponent('ID de suscripci√≥n no encontrado')}`);
    }

    // Obtener informaci√≥n de la suscripci√≥n desde MercadoPago
    console.log('üîÑ Consultando estado de suscripci√≥n en MercadoPago...');
    const subscriptionStatus = await getMercadoPagoSubscriptionStatus(preapprovalId);
    
    console.log('üìä Estado de suscripci√≥n:', subscriptionStatus);

    if (!subscriptionStatus) {
      console.log('‚ùå Error: No se pudo obtener el estado de la suscripci√≥n');
      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_SITE_URL}/protected/billing?status=error&message=${encodeURIComponent('Error al verificar el estado de la suscripci√≥n')}`);
    }

    // Verificar el estado de la suscripci√≥n
    if (subscriptionStatus.status === 'authorized') {
      console.log('‚úÖ Suscripci√≥n autorizada - Guardando en base de datos...');
      
      // Obtener el usuario actual
      const supabase = await createClient();
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError || !user) {
        console.log('‚ùå Error: Usuario no autenticado');
        return NextResponse.redirect(`${process.env.NEXT_PUBLIC_SITE_URL}/protected/billing?status=error&message=${encodeURIComponent('Usuario no autenticado')}`);
      }

      // Extraer informaci√≥n del plan desde external_reference
      const externalReference = subscriptionStatus.external_reference;
      const planId = externalReference?.split('_')[0] || 'basic';
      
      console.log('üìã Plan ID extra√≠do:', planId);
      
      // Obtener informaci√≥n del plan
      const plan = await getSubscriptionPlan(planId);
      if (!plan) {
        console.log('‚ùå Error: Plan no encontrado:', planId);
        return NextResponse.redirect(`${process.env.NEXT_PUBLIC_SITE_URL}/protected/billing?status=error&message=${encodeURIComponent('Plan no encontrado')}`);
      }

      // Crear la suscripci√≥n en nuestra base de datos
      const { data: subscription, error: subscriptionError } = await supabase
        .from('user_subscriptions')
        .insert({
          user_id: user.id,
          plan_id: planId,
          mercadopago_id: preapprovalId,
          status: 'active',
          amount: plan.price,
          currency: plan.currency,
          current_period_start: new Date().toISOString(),
          current_period_end: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 d√≠as
          metadata: {
            mercadopago_status: subscriptionStatus.status,
            payer_email: subscriptionStatus.payer_email,
            external_reference: externalReference,
            collection_id: collectionId
          }
        })
        .select()
        .single();

      if (subscriptionError) {
        console.error('‚ùå Error al guardar suscripci√≥n:', subscriptionError);
        return NextResponse.redirect(`${process.env.NEXT_PUBLIC_SITE_URL}/protected/billing?status=error&message=${encodeURIComponent('Error al guardar la suscripci√≥n')}`);
      }

      console.log('‚úÖ Suscripci√≥n guardada exitosamente:', subscription);
      
      // Redirigir a la p√°gina de billing con √©xito
      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_SITE_URL}/protected/billing?status=success&subscription_id=${subscription.id}`);
      
    } else if (subscriptionStatus.status === 'pending') {
      console.log('‚è≥ Suscripci√≥n pendiente');
      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_SITE_URL}/protected/billing?status=pending&message=${encodeURIComponent('Suscripci√≥n pendiente de aprobaci√≥n')}`);
      
    } else if (subscriptionStatus.status === 'cancelled') {
      console.log('‚ùå Suscripci√≥n cancelada');
      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_SITE_URL}/protected/billing?status=error&message=${encodeURIComponent('Suscripci√≥n cancelada')}`);
      
    } else {
      console.log('‚ùå Estado de suscripci√≥n no v√°lido:', subscriptionStatus.status);
      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_SITE_URL}/protected/billing?status=error&message=${encodeURIComponent('Estado de suscripci√≥n no v√°lido')}`);
    }

  } catch (error) {
    console.error('üí• Error completo:', error);
    return NextResponse.redirect(`${process.env.NEXT_PUBLIC_SITE_URL}/protected/billing?status=error&message=${encodeURIComponent('Error interno del servidor')}`);
  }
}

// Funci√≥n para consultar el estado de una suscripci√≥n en MercadoPago
async function getMercadoPagoSubscriptionStatus(preapprovalId: string) {
  try {
    console.log('üîÑ Consultando MercadoPago API para preapproval_id:', preapprovalId);
    
    const response = await fetch(`https://api.mercadopago.com/preapproval/${preapprovalId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${process.env.MERCADOPAGO_ACCESS_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      console.error('‚ùå Error en respuesta de MercadoPago:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('‚ùå Error details:', errorText);
      return null;
    }

    const data = await response.json();
    console.log('‚úÖ Respuesta de MercadoPago:', data);
    
    return data;
  } catch (error) {
    console.error('üí• Error consultando MercadoPago:', error);
    return null;
  }
} 